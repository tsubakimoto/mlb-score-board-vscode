name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update version in package.json
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ needs.validate.outputs.version }}"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            npm version "$TARGET_VERSION" --no-git-tag-version
          else
            echo "Version is already $TARGET_VERSION, skipping npm version."
          fi
        
      - name: Package extension
        run: npm run package
        
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: mlb-score-board-vscode-${{ needs.validate.outputs.version }}
          path: '*.vsix'
          retention-days: 90
          
      - name: Create release notes
        run: |
          echo "## MLB Score Board VS Code Extension v${{ needs.validate.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md
          echo "### Features" >> release-notes.md
          echo "- View MLB game scores for today" >> release-notes.md
          echo "- Reload functionality to refresh scores" >> release-notes.md
          echo "- PST timezone support" >> release-notes.md
          echo "- Clean VS Code integration" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Installation" >> release-notes.md
          echo "Download the .vsix file and install using:" >> release-notes.md
          echo "\`code --install-extension mlb-score-board-vscode-${{ needs.validate.outputs.version }}.vsix\`" >> release-notes.md
          
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md